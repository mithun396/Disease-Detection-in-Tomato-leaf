import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.models import model_from_json
import cv2

# Test set Image Processing
validation_set = tf.keras.utils.image_dataset_from_directory(
    'valid',
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(512, 512),  # Adjusted to (512, 512) based on model's expected input size
    shuffle=True
)
class_names = validation_set.class_names
print(class_names)
# Load the pre-trained model
model = tf.keras.models.load_model('potatoes.keras')
# Test Image Visualization
image_path = "C:/Users/raksh/project/test/test/TomatoHealthy1.JPG"
# Reading an image in default mode
img = cv2.imread(image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Converting BGR to RGB
# Displaying the image 
plt.imshow(img)
plt.title('Test Image')
plt.xticks([])
plt.yticks([])
plt.show()

# Prepare the image for prediction
image = load_img(image_path, target_size=(512, 512))  # Adjusted to (512, 512)
input_arr = img_to_array(image)
input_arr = np.expand_dims(input_arr, axis=0)  # Convert single image to a batch.
model.summary()

# Make prediction
predictions = model.predict(input_arr)
print(predictions)
# Get the index of the highest probability class
result_index = np.argmax(predictions)
print(result_index)
# Display the disease prediction
model_prediction = class_names[result_index]
plt.imshow(img)
plt.title(f"Disease Name: {model_prediction}")
plt.xticks([])
plt.yticks([])
plt.show()
